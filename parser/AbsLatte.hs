

module AbsLatte where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Program [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef
    = FnDef FuncDef
    | ClassDef Ident [CDef]
    | ClassExtDef Ident Ident [CDef]
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Type Ident
  deriving (Eq, Ord, Show, Read)

data FuncDef = FunDef Type Ident [Arg] Block
  deriving (Eq, Ord, Show, Read)

data ClassItem = ClassItem Ident
  deriving (Eq, Ord, Show, Read)

data CDef = Method FuncDef | Attr Type [ClassItem]
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Block
    | Decl Type [Item]
    | Ass LVal Expr
    | Incr LVal
    | Decr LVal
    | Ret Expr
    | VRet
    | Cond Expr Stmt
    | CondElse Expr Stmt Stmt
    | While Expr Stmt
    | For Type Ident LVal Stmt
    | SExp Expr
  deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident | Init Ident Expr
  deriving (Eq, Ord, Show, Read)

data Type
    = Int
    | Str
    | Bool
    | Void
    | Fun Type [Type]
    | Array Type
    | Class Ident
  deriving (Eq, Ord, Show, Read)

data Expr
    = ENullRef Type
    | EAttr ClsAttrAcc
    | EMethApp MethodApp
    | EArrElem ArrElemAcc
    | EVar Ident
    | ENewArr Type Expr
    | ENew Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | EApp FunApp
    | EString String
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data FunApp = FnApp Ident [Expr]
  deriving (Eq, Ord, Show, Read)

data ArrElemAcc = ArrElem LVal Expr
  deriving (Eq, Ord, Show, Read)

data ClsAttrAcc = AttrAcc LVal Ident
  deriving (Eq, Ord, Show, Read)

data MethodApp = MethApp LVal FunApp
  deriving (Eq, Ord, Show, Read)

data LVal
    = LValVal Ident
    | LValFunApp FunApp
    | LValMethApp MethodApp
    | LValArrAcc ArrElemAcc
    | LValAttr ClsAttrAcc
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

