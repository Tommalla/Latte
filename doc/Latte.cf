-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= FuncDef ;
ClassDef.  TopDef ::= "class" Ident "{" [CDef] "}" ;
ClassExtDef. TopDef ::= "class" Ident "extends" Ident "{" [CDef] "}" ;

separator nonempty TopDef "" ;

Arg. 	   Arg ::= Type Ident;

separator  Arg "," ;

FunDef.   FuncDef ::= Type Ident "(" [Arg] ")" Block ;

-- class definitions ---------------------------------------

ClassItem. ClassItem ::= Ident ;

separator nonempty ClassItem ",";

Method.    CDef ::= FuncDef ;
Attr.      CDef ::= Type [ClassItem] ";";

separator nonempty CDef "" ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ;

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= LVal "=" Expr  ";" ;

Incr.      Stmt ::= LVal "++"  ";" ;

Decr.      Stmt ::= LVal "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

For.       Stmt ::= "for" "(" Type Ident ":" LVal ")" Stmt;

SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "boolean" ;

Void.      Type ::= "void" ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

Array.       Type ::= Type "[]";

Class.       Type ::= Ident;

separator  Type "," ;

-- Expressions ---------------------------------------------

ENullRef.     Expr6 ::= "(" Type ")null" ;

EAttr.         Expr6 ::= ClsAttrAcc ;

EMethApp.      Expr6 ::= MethodApp ;

EArrElem.    Expr6 ::= ArrElemAcc ;

EVar.          Expr6 ::= Ident ;

ENewArr.       Expr6 ::= "new" Type "[" Expr "]" ;

ENew.          Expr6 ::= "new" Ident ;

ELitInt.       Expr6 ::= Integer ;

ELitTrue.      Expr6 ::= "true" ;

ELitFalse.     Expr6 ::= "false" ;

EApp.          Expr6 ::= FunApp ;

EString.       Expr6 ::= String ;

Neg.           Expr5 ::= "-" Expr6 ;

Not.           Expr5 ::= "!" Expr6 ;

EMul.          Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.          Expr3 ::= Expr3 AddOp Expr4 ;

ERel.          Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.          Expr1 ::= Expr2 "&&" Expr1 ;

EOr.           Expr ::= Expr1 "||" Expr ;

coercions      Expr 6 ;

separator      Expr "," ;


-- Parts needed for Arrays and Objects ---------------------

FnApp.  FunApp ::= Ident "(" [Expr] ")" ;

ArrElem. ArrElemAcc ::= LVal "[" Expr "]" ;

AttrAcc. ClsAttrAcc ::= LVal "." Ident ;

MethApp.    MethodApp ::= LVal "." FunApp ;

-- Left Values for Arrays and Objects --------------------------

LValVal.       LVal ::= Ident ;
LValFunApp.    LVal ::= FunApp ;
LValMethApp.   LVal ::= MethodApp ;
LValArrAcc.    LVal ::= ArrElemAcc ;
LValAttr.      LVal ::= ClsAttrAcc ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

